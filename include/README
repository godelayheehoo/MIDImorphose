
# MIDImorphose Include Directory

This directory contains the project-specific header files that provide centralized configuration and hardware definitions for the MIDImorphose MIDI processing system.

## Header Files Overview

### üìç `PinDefinitions.h`
**Hardware Pin Configuration**

Contains all hardware pin assignments for the Teensy 4.1-based system, organized by function:

- **Direct Teensy Pins**: Buttons, switches, LEDs, analog inputs
- **Display Pins**: TM1637 7-segment, TFT (ST7789), OLED (SSD1306)  
- **MCP23X17 Expander Pins**: Menu controls, keypad matrix, MIDI channel dipswitches
- **Pin Arrays**: Pre-built arrays for easy iteration (keypad, MIDI channels, menu controls)

**When to modify**: Hardware changes, board layout updates, pin reassignments

### ‚öôÔ∏è `SystemConfig.h`
**Core System Configuration**

Defines fundamental operational parameters that control system behavior:

- **Buffer Sizes**: Event processing, jitter, retrigger, percussion buffers
- **Timing Constants**: Debounce times, display durations, retrigger intervals
- **Audio Processing**: Drum machine limits, pitch bend voices, probabilities
- **Display Settings**: Screen dimensions, LED blink patterns
- **Debug Flags**: Development and debugging controls
- **Utility Macros**: Helper functions and range checking

**When to modify**: Performance tuning, memory optimization, timing adjustments

### üíæ `EEPROMAddresses.h` 
**Non-Volatile Memory Layout**

Maps EEPROM addresses for persistent storage of user settings and system state:

- **Menu Settings**: User preferences, display modes, effect parameters
- **MIDI Configuration**: Channel assignments, routing preferences
- **System State**: Calibration data, user customizations

**When to modify**: Adding new persistent settings, reorganizing storage layout

## Usage Patterns

```cpp
// In your source files, include the needed headers:
#include "PinDefinitions.h"    // For hardware pin access
#include "SystemConfig.h"      // For system parameters
#include "EEPROMAddresses.h"   // For persistent storage

// Example usage:
pinMode(PIN_STUTTER_SWITCH, INPUT);           // Hardware pin
digitalWrite(PIN_BUFFER_FULL_LED, HIGH);     // LED control
analogRead(PIN_STRETCH_POT);                 // Analog input
keypad.setup(KEYPAD_COL_PINS, KEYPAD_ROW_PINS); // Pin arrays

// System configuration:
CircularBuffer<MidiEvent, MAX_EVENTS> buffer;  // Buffer sizing
delay(DEBOUNCE_MS);                             // Timing constants
```

## Development Guidelines

- **Pin Changes**: Always update `PinDefinitions.h` rather than hardcoding
- **Performance Tuning**: Adjust buffer sizes in `SystemConfig.h` based on testing
- **New Features**: Add EEPROM addresses to `EEPROMAddresses.h` for persistent settings
- **Documentation**: Update comments when modifying behavior or adding new parameters
